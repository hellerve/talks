(defun find-matching-bracket (s depth)
  (if (or (= 0 depth) (= (length s) 0))
    0
    (+ 1 (find-matching-bracket (subseq s 1) (case (char s 0)
                                                (#\[ (incf depth))
                                                (#\] (decf depth))
                                                (otherwise depth))))))

(defun interpret (s)
  (defun interpreter (s tape head)
    (loop while (> (length s) 0)
      do
        (case (char s 0)
          (#\> (setf head (incf head)))
          (#\< (setf head (decf head)))
          (#\+ (setf (aref tape head) (incf (aref tape head))))
          (#\- (setf (aref tape head) (decf (aref tape head))))
          (#\. (format T "~a" (code-char (aref tape head))))
          (#\, (setf (aref tape head) (read-byte *standard-input*)))
          (#\[ (let* ((e (find-matching-bracket (subseq s 1) 1))
                      (body (subseq s 1 e)))
            (loop
              while (/= 0 (aref tape head))
              do (setf (values tape head) (interpreter body tape head)))
            (setf s (subseq s e))))
          (otherwise ()))
        (setf s (subseq s 1)))
     (values tape head))
    (interpreter s (make-array 30000 :initial-element 0) 0)
    nil)

(defmacro compile-bf (s)
  (defun compiler (s)
    (loop while (> (length s) 0)
      collect
        (let ((res (case (char s 0)
                (#\> '(setf head (incf head)))
                (#\< '(setf head (decf head)))
                (#\+ '(setf (aref tape head) (incf (aref tape head))))
                (#\- '(setf (aref tape head) (decf (aref tape head))))
                (#\. '(format T "~a" (code-char (aref tape head))))
                (#\, '(setf (aref tape head) (read-byte *standard-input*)))
                (#\[ (let* ((e (find-matching-bracket (subseq s 1) 1))
                            (body (subseq s 1 e)))
                  (setf s (subseq s e))
                  `(loop
                    while (/= 0 (aref tape head))
                    do ,@(compiler body))))
                (otherwise '()))))
          (setf s (subseq s 1))
          res)))
    `(let ((tape (make-array 30000 :initial-element 0))
           (head 0))
       ,@(compiler s)))
